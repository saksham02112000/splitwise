{"version":3,"sources":["classes/expense.js","utils/splitwise.js","Component/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Expense","p1","p2","val","this","person1","person2","amount","upheapify","heap","idx","pi","Math","floor","first","temp","downheapify","lc","rc","length","largest","push_heap","key","ob","second","push","pop_heap","i","pop","heap_top","Home","useState","name","setName","allNames","setAllNames","flag","setFlag","finalValues","setFinalValues","items","setItems","outputList","setOutputList","inputGraphData","setInputGraphData","inputGraphConfig","setInputGraphConfig","outputGraphData","setOutputGraphData","handleFinalChange","event","target","value","generateNodes","map","item","id","generateLinks","source","generateOutputLinks","className","TextField","label","variant","disabled","onChange","Button","color","onClick","preventDefault","previous","index","style","Grid","container","xs","md","textAlign","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","FormControl","InputLabel","Select","MenuItem","type","placeholder","InputLabelProps","shrink","size","e","alert","console","log","data","nodes","links","freezeAllDragEvents","nodeHighlightBehavior","node","highlightStrokeColor","fontSize","link","highlightColor","renderLabel","labelProperty","directed","height","width","input","parseInt","output","transactions","net_balance","positive","negative","p","result","exp","min","splitwise","Object","keys","config","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16009751.chunk.js","sourcesContent":["export default class Expense {\n  constructor(p1, p2, val) {\n    this.person1 = p1;\n    this.person2 = p2;\n    this.amount = val;\n  }\n}","import Expense from \"../classes/expense\";\nfunction upheapify(heap, idx) {\n  // heap = [{first: net_value, second: person}]\n  if (idx == 0) return;\n  var pi = Math.floor((idx - 1) / 2);\n  if (heap[pi].first < heap[idx].first) {\n    var temp = heap[pi];\n    heap[pi] = heap[idx];\n    heap[idx] = temp;\n    upheapify(heap, pi);\n  } else {\n    return;\n  }\n}\n\nfunction downheapify(heap, idx) {\n  var lc = 2 * idx + 1;\n  var rc = 2 * idx + 2;\n  if (lc >= heap.length && rc >= heap.length) return;\n  var largest = idx;\n  if (lc < heap.length && heap[lc].first > heap[largest].first) {\n    largest = lc;\n  }\n  if (rc < heap.length && heap[rc].first > heap[largest].first) {\n    largest = rc;\n  }\n  if (largest == idx) return;\n  var temp = heap[largest];\n  heap[largest] = heap[idx];\n  heap[idx] = temp;\n  downheapify(heap, largest);\n}\n\nfunction push_heap(heap, key, val) {\n  var ob = { first: key, second: val };\n  heap.push(ob);\n  upheapify(heap, heap.length - 1);\n}\n\nfunction pop_heap(heap) {\n  if (heap.length == 0) return 0;\n  var i = heap.length - 1;\n  var temp = heap[0];\n  heap[0] = heap[i];\n  heap[i] = temp;\n  heap.pop();\n  downheapify(heap, 0);\n}\n\nfunction heap_top(heap) {\n  if (heap.length == 0) {\n    return;\n  }\n  return heap[0];\n}\n\n// transactions = [{person1: 'pulkit', person2: 'deepak', amount: 100}]\nexport function splitwise(transactions) {\n  // transactions array will store an object of expense class\n  var net_balance = {}; // hashmap or also called as object in js\n  for (var i = 0; i < transactions.length; i++) {\n    var e = transactions[i]; // e is an object of expense class\n\n    // person1 is the payer so under a credit\n    // person2 is the payee so under a debit\n    if (e.person1 in net_balance) {\n      // checks whther e.person1 is present in hashmap or not\n      net_balance[e.person1] += e.amount;\n    } else {\n      net_balance[e.person1] = e.amount;\n    }\n\n    if (e.person2 in net_balance) {\n      net_balance[e.person2] -= e.amount;\n    } else {\n      net_balance[e.person2] = -e.amount;\n    }\n  }\n\n  var positive = []; // heap of credit holders\n  var negative = []; // heap of debit holders\n\n  for (const p in net_balance) {\n    if (net_balance[p] > 0) {\n      push_heap(positive, net_balance[p], p);\n    } else {\n      push_heap(negative, -1 * net_balance[p], p);\n    }\n  }\n\n  var result = []; // array of expense objects\n\n  while (positive.length > 0) {\n    var p1 = heap_top(positive);\n    var p2 = heap_top(negative);\n    pop_heap(positive);\n    pop_heap(negative);\n    let exp = new Expense(p2.second, p1.second, Math.min(p1.first, p2.first));\n    result.push(exp);\n    if (p1.first > p2.first) {\n      push_heap(positive, p1.first - p2.first, p1.second);\n    } else if (p1.first < p2.first) {\n      push_heap(negative, p2.first - p1.first, p2.second);\n    }\n  }\n\n  return result;\n}\n","import React, { useState } from \"react\";\nimport {\n  TextField,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TableCell,\n  TableContainer,\n  Paper,\n  Table,\n  TableHead,\n  TableRow,\n  TableBody,\n  Grid,\n} from \"@material-ui/core\";\nimport { Graph } from \"react-d3-graph\";\nimport Expense from \"../classes/expense\";\nimport { splitwise } from \"../utils/splitwise\";\n\nconst Home = () => {\n  const [name, setName] = useState(\"\");\n  const [allNames, setAllNames] = useState([]);\n  const [flag, setFlag] = useState(false);\n  const [finalValues, setFinalValues] = useState({\n    person1: \"\",\n    person2: \"\",\n    amount: \"\",\n  });\n  const [items, setItems] = useState([]);\n  const [outputList, setOutputList] = useState([]);\n\n  const { person1, person2, amount } = finalValues;\n\n  const [inputGraphData, setInputGraphData] = useState({});\n  const [inputGraphConfig, setInputGraphConfig] = useState({});\n\n  const [outputGraphData, setOutputGraphData] = useState({});\n\n  const handleFinalChange = (name) => (event) => {\n    setFinalValues({ ...finalValues, [name]: event.target.value });\n  };\n\n  const handleChange = (event) => {\n    setName(event.target.value);\n  };\n\n  const addParticipant = (event) => {\n    event.preventDefault();\n    setAllNames((previous) => [{ name }, ...previous]);\n    setName(\"\");\n  };\n\n  const listOfNames = () => {\n    return (\n      <div className=\"allnames\">\n        <h3>Names</h3>\n\n        {allNames.map((item, index) => (\n          <h4 style={{ color: \"#3f3f3f\" }} key={index}>\n            {\" \"}\n            {item.name}\n          </h4>\n        ))}\n      </div>\n    );\n  };\n\n  const handleOpenForm = () => {\n    setFlag(!false);\n  };\n\n  const myForm = () => {\n    function addValues() {\n      if (\n        finalValues[\"person1\"] !== \"\" &&\n        finalValues[\"person2\"] !== \"\" &&\n        finalValues[\"amount\"] !== \"\"\n      ) {\n        setItems([...items, finalValues]);\n      } else {\n        alert(\"Enter all Fields\");\n      }\n      setFinalValues({\n        ...finalValues,\n        person1: \"\",\n        person2: \"\",\n        amount: \"\",\n      });\n    }\n    return (\n      <TableContainer component={Paper} className=\"table\">\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Payer</TableCell>\n              <TableCell align=\"center\">Payee</TableCell>\n              <TableCell align=\"center\">Amount</TableCell>\n              <TableCell align=\"center\">Add</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {items.length > 0 &&\n              items.map((row) => (\n                <TableRow key={row.name}>\n                  <TableCell component=\"th\" align=\"center\" scope=\"row\">\n                    {row.person1}\n                  </TableCell>\n                  <TableCell align=\"center\">{row.person2}</TableCell>\n                  <TableCell align=\"center\">{row.amount}</TableCell>\n                </TableRow>\n              ))}\n            <TableRow>\n              <TableCell align=\"center\">\n                <FormControl>\n                  <InputLabel>Payer</InputLabel>\n                  <Select\n                    value={person1}\n                    onChange={handleFinalChange(\"person1\")}\n                  >\n                    {allNames.map((item) => (\n                      <MenuItem value={item.name}>{item.name}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </TableCell>\n\n              <TableCell align=\"center\">\n                <FormControl>\n                  <InputLabel>Payee</InputLabel>\n                  <Select\n                    value={person2}\n                    onChange={handleFinalChange(\"person2\")}\n                  >\n                    {allNames.map((item) =>\n                      person1 !== item.name ? (\n                        <MenuItem value={item.name}>{item.name}</MenuItem>\n                      ) : (\n                        <></>\n                      )\n                    )}\n                  </Select>\n                </FormControl>\n              </TableCell>\n\n              <TableCell align=\"center\">\n                <FormControl>\n                  <TextField\n                    id=\"standard-number\"\n                    label=\"Amount\"\n                    type=\"number\"\n                    value={amount}\n                    placeholder=\"Enter Amount\"\n                    onChange={handleFinalChange(\"amount\")}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                </FormControl>\n              </TableCell>\n\n              <TableCell align=\"center\">\n                <Button\n                  size=\"small\"\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={(e) => {\n                    addValues();\n                  }}\n                >\n                  + ADD\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n  const handleTransactionDataSubmit = () => {\n    console.log(\"Participants: \", allNames, \" transactions: \", items);\n    const data = {\n      nodes: generateNodes(),\n      links: generateLinks(),\n    };\n    const config = {\n      freezeAllDragEvents: true,\n      nodeHighlightBehavior: true,\n      node: {\n        color: \"lightgreen\",\n        highlightStrokeColor: \"blue\",\n        fontSize: 12,\n      },\n      link: {\n        highlightColor: \"lightblue\",\n        renderLabel: true,\n        labelProperty: \"amount\",\n        fontSize: 12,\n      },\n      directed: true,\n      height: 600,\n      width: 600,\n    };\n\n    setInputGraphData(data);\n    setInputGraphConfig(config);\n  };\n\n  const generateNodes = () => allNames.map((item) => ({ id: item.name }));\n\n  const generateLinks = () =>\n    items.map(({ person1, person2, amount }) => ({\n      source: person1,\n      target: person2,\n      amount,\n    }));\n\n  const generateOutputLinks = (items) =>\n    items.map(({ person1, person2, amount }) => ({\n      source: person1,\n      target: person2,\n      amount,\n    }));\n\n  const splitwiseTransactions = () => {\n    const input = [];\n    for (let item of items) {\n      input.push(\n        new Expense(item.person1, item.person2, parseInt(item.amount))\n      );\n    }\n    const output = splitwise(input);\n    console.log(\"output: \", output);\n    setOutputList(output);\n    setOutputGraphData({\n      nodes: generateNodes(),\n      links: generateOutputLinks(output),\n    });\n  };\n\n  return (\n    <div>\n      <div className=\"name-component\">\n        <div className=\"p-name\">\n          <h2>Enter names of People in the group</h2>\n          <div className=\"p-name-field\">\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Name\"\n              variant=\"outlined\"\n              value={name}\n              disabled={flag}\n              onChange={handleChange}\n            />\n          </div>\n          <Button variant=\"contained\" color=\"primary\" onClick={addParticipant}>\n            Add\n          </Button>\n        </div>\n        {allNames && allNames.length ? (\n          <>\n            <div className=\"list-div\">\n              <div className=\"list-all-names\">{listOfNames()}</div>\n            </div>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={handleOpenForm}\n            >\n              Submit\n            </Button>\n          </>\n        ) : null}\n      </div>\n\n      {flag ? (\n        <>\n          <Grid container>\n            <Grid item xs={12} md={6}>\n              <div>\n                <div>\n                  <h4>Transactions</h4>\n                  <div style={{ textAlign: \"left\" }}>\n                    <p>Enter transactions in the table below :-</p>\n                    <ol>\n                      <li>Enter the names of the Payer in first column</li>\n                      <li>Enter the names of the Payee in second column</li>\n                      <li>Enter the amount paid in the third column</li>\n                      <li>\n                        Click on Build Graph to build a graph from the given\n                        transactions\n                      </li>\n                      <li>\n                        Click on Simplify payments button when you are done with\n                        entering the payments.\n                      </li>\n                    </ol>\n                  </div>\n                </div>\n              </div>\n              <div className=\"form\">{flag && myForm()}</div>\n\n              {items && items.length ? (\n                <div className=\"form-names\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleTransactionDataSubmit}\n                  >\n                    Build Graph\n                  </Button>\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={splitwiseTransactions}\n                  >\n                    Simplify Settlements\n                  </Button>\n                </div>\n              ) : null}\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              {Object.keys(inputGraphData).length &&\n              Object.keys(inputGraphConfig).length ? (\n                <>\n                  <h5>Generated graph from the transactions entered</h5>\n                  <Graph\n                    id=\"graph-id\" // id is mandatory\n                    data={inputGraphData}\n                    config={inputGraphConfig}\n                  />\n                </>\n              ) : null}\n            </Grid>\n          </Grid>\n\n          <Grid container>\n            <Grid item xs={12} md={6}>\n              {outputList && outputList.length ? (\n                <>\n                  <h3> Simplified Settlement</h3>\n                  <TableContainer component={Paper} className=\"table\">\n                    <Table aria-label=\"simple table\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell align=\"center\">Payee</TableCell>\n                          <TableCell align=\"center\">Payer</TableCell>\n                          <TableCell align=\"center\">Amount</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {outputList.length &&\n                          outputList.map((row) => (\n                            <TableRow key={row.name}>\n                              <TableCell\n                                component=\"th\"\n                                align=\"center\"\n                                scope=\"row\"\n                              >\n                                {row.person1}\n                              </TableCell>\n                              <TableCell align=\"center\">\n                                {row.person2}\n                              </TableCell>\n                              <TableCell align=\"center\">{row.amount}</TableCell>\n                            </TableRow>\n                          ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </>\n              ) : null}\n            </Grid>\n            <Grid item xs={12} md={6}>\n              {Object.keys(outputGraphData).length &&\n              Object.keys(inputGraphConfig).length ? (\n                <>\n                  <h5>Graph generated from the solution of algorithm</h5>\n                  <Graph\n                    id=\"graph-id-output\" // id is mandatory\n                    data={outputGraphData}\n                    config={inputGraphConfig}\n                  />\n                </>\n              ) : null}\n            </Grid>\n          </Grid>\n        </>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react'\nimport './App.css';\nimport Home from './Component/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n      {/* <Demo /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}